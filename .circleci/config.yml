# https://circleci.com/docs/2.0/workflows/#using-workspaces-to-share-data-among-jobs
defaults: &defaults
  docker:
    - image: quay.io/pantheon-public/build-tools-ci:6.x
  working_directory: ~/example_drops_8_composer
  environment:
    #=========================================================================
    # In addition to the environment variables defined in this file, also
    # add the following variables in the Circle CI UI.
    #
    # See: https://circleci.com/docs/2.0/env-vars/
    #
    # TERMINUS_SITE:  Name of the Pantheon site to run tests on, e.g. my_site
    # TERMINUS_TOKEN: The Pantheon machine token
    # GITHUB_TOKEN:   The GitHub personal access token
    # GIT_EMAIL:      The email address to use when making commits
    #
    # TEST_SITE_NAME: The name of the test site to provide when installing.
    # ADMIN_PASSWORD: The admin password to use when installing.
    # ADMIN_EMAIL:    The email address to give the admin when installing.
    #=========================================================================
    TZ: "/usr/share/zoneinfo/America/Los_Angeles"

    # The variables below usually do not need to be modified.

    #======================================================================================================================================
    # Circle CI 2.0 does not yet expand environment variables so they have to be manually EXPORTed
    # Once environment variables can be expanded the variables below can be uncommented and the EXPORTs in set-up-globals.sh can be removed
    # See: https://discuss.circleci.com/t/unclear-how-to-work-with-user-variables-circleci-provided-env-variables/12810/11
    # See: https://discuss.circleci.com/t/environment-variable-expansion-in-working-directory/11322
    # See: https://discuss.circleci.com/t/circle-2-0-global-environment-variables/8681
    #======================================================================================================================================

    NOTIFY: 'scripts/github/add-commit-comment {project} {sha} "Created multidev environment [{site}#{env}]({dashboard-url})." {site-url}'
    ADMIN_USERNAME: admin
    # BUILD_TOOLS_VERSION: ^2.0.0-alpha4
    TERM: dumb

version: 2
jobs:
  configure_env_vars:
    <<: *defaults

    steps:
      - checkout

      - run:
          # Set TERMINUS_ENV and related environment variables.
          # https://github.com/pantheon-systems/docker-build-tools-ci/blob/6.x/scripts/set-environment
          name: setup-environment-vars
          command: /build-tools-ci/scripts/set-environment

      - run:
          name: clone-bash-env
          command: cp $BASH_ENV bash_env.txt

      # https://circleci.com/docs/2.0/workflows/#using-workspaces-to-share-data-among-jobs
      - persist_to_workspace:
          root: .
          paths:
            - bash_env.txt

  static_tests:
    <<: *defaults

    steps:
      - checkout

      - restore_cache:
          keys:
            - composer-cache-{{ checksum "composer.lock" }}
            - composer-cache-

      - run:
          # Set TERMINUS_ENV and related environment variables.
          # https://github.com/pantheon-systems/docker-build-tools-ci/blob/6.x/scripts/set-environment
          name: setup-environment-vars
          command: /build-tools-ci/scripts/set-environment

      - run:
          name: run static tests
          command: ./.ci/test/static/run

      - save_cache:
          key: composer-cache-{{ checksum "composer.lock" }}
          paths:
            - $HOME/.composer/cache

  build_php:
    <<: *defaults
    steps:
      - checkout

      - restore_cache:
          keys:
            - composer-cache-{{ checksum "composer.lock" }}
            - composer-cache-
            - vendor-{{ checksum "composer.lock" }}
            - vendor-

      - run:
          # Set TERMINUS_ENV and related environment variables.
          # https://github.com/pantheon-systems/docker-build-tools-ci/blob/6.x/scripts/set-environment
          name: setup-environment-vars
          command: /build-tools-ci/scripts/set-environment

      - run:
          name: run PHP build step
          command: ./.ci/build/php

      - save_cache:
          key: vendor-{{ checksum "composer.lock" }}
          paths:
            - $CIRCLE_WORKING_DIRECTORY/vendor

      - persist_to_workspace:
          root: .
          paths:
            - web
            - vendor
            - drush

  deploy_to_pantheon:
    <<: *defaults
    steps:
      - checkout

      # Attach the workspace
      - attach_workspace:
          at: /tmp

      - run:
          # Set TERMINUS_ENV and related environment variables.
          # https://github.com/pantheon-systems/docker-build-tools-ci/blob/6.x/scripts/set-environment
          name: setup-environment-vars
          command: /build-tools-ci/scripts/set-environment

      # Rsync the build artifact pieces web directory
      - run:
          name: sync build artifact
          command: rsync -rz /tmp/web /tmp/vendor /tmp/drush .

      # Deploy to Pantheon
      - run:
          name: deploy to Pantheon
          command: ./.ci/deploy/pantheon/dev-multidev

  behat_test:
    <<: *defaults
    steps:
      - checkout

      - restore_cache:
          keys:
            - composer-cache-{{ checksum "composer.lock" }}
            - composer-cache-

      - run:
          # Set TERMINUS_ENV and related environment variables.
          # https://github.com/pantheon-systems/docker-build-tools-ci/blob/6.x/scripts/set-environment
          name: setup-environment-vars
          command: /build-tools-ci/scripts/set-environment

      - run:
          # Uncomment line 26 in .ci/test/behat/initialize to create a backup
          # prior to running Behat tests. This is useful to reset the multidev
          # environment to the previous state after Behat tests have run.
          name: prepare for Behat testing
          command: ./.ci/test/behat/initialize

      - run:
          name: run acceptance tests with Behat
          command: ./.ci/test/behat/run

      - run:
          # Uncomment line 13 in .ci/test/behat/cleanup to restore a backup
          # after running Behat tests. This is useful to reset the multidev
          # environment to the previous state after Behat tests have run.
          name: clean up after Behat
          command: ./.ci/test/behat/cleanup
          when: always

      - save_cache:
          key: composer-cache-{{ checksum "composer.lock" }}
          paths:
            - $HOME/.composer/cache

      - store_artifacts:
          path: /tmp/artifacts
          destination: artifacts

  diffy_visual_regression_test:
    <<: *defaults
    steps:
      - diffy/compare_multidev_dev

  visual_regression_test:
    <<: *defaults
    docker:
      - image: backstopjs/backstopjs:4.1.9
    steps:
      - checkout

      - attach_workspace:
          at: /tmp/workspace

      - run: cp /tmp/workspace/bash_env.txt $BASH_ENV
      - run: echo "export CI_BUILD_URL='${CIRCLE_BUILD_URL}'" >> $BASH_ENV
      - run: echo "export CI_NODE_INDEX='${CIRCLE_NODE_INDEX}'" >> $BASH_ENV
      - run: echo "export CI_REPOSITORY_URL='${CIRCLE_REPOSITORY_URL}'" >> $BASH_ENV
      - run: echo "export ARTIFACTS_DIR_URL='${CIRCLE_BUILD_URL}/artifacts/${CIRCLE_NODE_INDEX}/artifacts'" >> $BASH_ENV
      - run: source $BASH_ENV

      - run:
          name: visual regression test
          command: ./.ci/test/visual-regression/run

      - store_artifacts:
          path: /tmp/artifacts
          destination: artifacts

  composer_lock_updater:
    <<: *defaults
    steps:
      - checkout

      - run:
          # Set TERMINUS_ENV and related environment variables.
          # https://github.com/pantheon-systems/docker-build-tools-ci/blob/6.x/scripts/set-environment
          name: setup-environment-vars
          command: /build-tools-ci/scripts/set-environment

      - run:
          name: Authenticate with Terminus
          command: terminus -n auth:login --machine-token="$TERMINUS_TOKEN"

      - run:
          name: run composer lock updater
          command: set -e && terminus project:clu $TERMINUS_SITE

workflows:
  version: 2
  build_deploy_and_test:
    jobs:
      - configure_env_vars
      - static_tests
      - build_php
      - deploy_to_pantheon:
          requires:
            - static_tests
            - build_php
      - diffy_visual_regression_test:
          requires:
            - configure_env_vars
            - deploy_to_pantheon
          filters:
            branches:
              ignore:
                - master
      - visual_regression_test:
          requires:
            - configure_env_vars
            - deploy_to_pantheon
          filters:
            branches:
              ignore:
                - master
      - behat_test:
          requires:
            - deploy_to_pantheon
            - visual_regression_test

  scheduled_update_check:
    triggers:
       - schedule:
           cron: "0 0 * * *"
           filters:
             branches:
              only:
                - master
    jobs:
      - composer_lock_updater

orbs:
  diffy:
    jobs:
      compare_multidev_dev:
        executor: diffy_executor
        steps:
          - checkout
          - attach_workspace:
              at: /tmp/workspace

          - run: cp /tmp/workspace/bash_env.txt $BASH_ENV
          - run: echo "export CI_BUILD_URL='${CIRCLE_BUILD_URL}'" >> $BASH_ENV
          - run: echo "export CI_NODE_INDEX='${CIRCLE_NODE_INDEX}'" >> $BASH_ENV
          - run: echo "export CI_REPOSITORY_URL='${CIRCLE_REPOSITORY_URL}'" >> $BASH_ENV
          - run: echo "export ARTIFACTS_DIR_URL='${CIRCLE_BUILD_URL}/artifacts/${CIRCLE_NODE_INDEX}/artifacts'" >> $BASH_ENV
          - run: source $BASH_ENV
          - trigger_compare
    commands:
      trigger_compare:
        steps:
          - run:
              name: Trigger Diffy API and post results
              command: |
                BUILD_DIR=$(pwd)
                GITHUB_API_URL="https://api.github.com/repos/$CI_PROJECT_USERNAME/$CI_PROJECT_REPONAME"

                if [ -z "$DIFFY_API_KEY" ]
                then
                  echo "Diffy integration is not configured. Add DIFFY_API_KEY to CircleCI variables."
                  exit 1;
                fi

                if [ -z "$DIFFY_PROJECT_ID" ]
                then
                  echo "Diffy integration is not configured. Add DIFFY_PROJECT_ID to CircleCI variables."
                  exit 1;
                fi

                GIT_FILE_MODIFIED()
                {
                    # Stash list of changed files
                    GIT_FILES_CHANGED="$(git diff origin/master --name-only)"

                    while read -r changedFile; do
                        if [[ "${changedFile}" == "$1" ]]
                        then
                            return 0;
                        fi
                    done <<< "$GIT_FILES_CHANGED"

                    return 1;
                }

                LAST_GIT_COMMIT_MESSAGE=$(git log -1 --pretty=%B)

                if [[ ${LAST_GIT_COMMIT_MESSAGE} == *"--skip-vr"* ]]
                then
                    echo -e "\nVisual regression tests skipped because the last commit contains --skip-vr"
                    exit 0
                fi

                # Always run visual tests if "[vr]" is in the last commit message
                if [[ ${LAST_GIT_COMMIT_MESSAGE} != *"[vr]"* ]]
                then

                    # Skip visual tests if there hasn't been a modification to composer.lock
                    if ! GIT_FILE_MODIFIED 'composer.lock'
                    then
                        echo -e "\nSkipping visual regression tests since composer.lock has NOT changed"
                        exit 0
                    fi

                    # Skip visual tests if has been a modification to composer.json
                    if GIT_FILE_MODIFIED 'composer.json'
                    then
                        echo -e "\nSkipping visual regression tests since composer.json HAS changed"
                        exit 0
                    fi

                else
                    echo -e "\nRunning visual regression tests because the latest commit message demands it"
                fi

                # Ping the multidev environment to wake it from sleep
                echo -e "\nPinging the ${TERMINUS_ENV} multidev environment to wake it from sleep..."
                curl -I "$MULTIDEV_SITE_URL" >/dev/null

                # Ping the live environment to wake it from sleep
                echo -e "\nPinging the dev environment to wake it from sleep..."
                curl -I "$DEV_SITE_URL" >/dev/null

                # Get an access token from Diffy.
                echo -e "\nGetting an access token from Diffy"
                TOKEN=`curl -X POST "https://app.diffy.website/api/auth/key" -H "accept: application/json" -H "Content-Type: application/json" -d "{\"key\":\"$DIFFY_API_KEY\"}" | php -r 'echo json_decode(file_get_contents("php://stdin"))->token;'`

                # Trigger a job to compare environments.
                echo -e "\nCompare a build ${MULTIDEV_SITE_URL} with DEV environment..."
                DIFF_ID=`curl -X POST "https://app.diffy.website/api/projects/$DIFFY_PROJECT_ID/compare" -H "Accept: application/json" -H "Authorization: Bearer $TOKEN" -H "Content-Type: application/json" -d "{\"env1\":\"dev\",\"env2\":\"custom\",\"env2Url\":\"${MULTIDEV_SITE_URL}\"}"`
                sleep 30

                DIFF_COMPLETED=''
                while [ -z "$DIFF_COMPLETED" ]
                do
                  echo -e "\nChecking status of the diff $DIFF_ID"
                  # State 4 or 8 means that diff completed. 8 means that Diffy creates an archive but we already can treat it as completed.
                  DIFF_INFO=`curl -X GET "https://app.diffy.website/api/diffs/$DIFF_ID" -H "Accept: application/json" -H "Authorization: Bearer $TOKEN" -H "Content-Type: application/json"`
                  echo -e "\n Result of the check: $DIFF_INFO"
                  DIFF_COMPLETED=`echo $DIFF_INFO | grep '"state":8\|"state":4'`
                  echo -e "\n Diff completed? $DIFF_COMPLETED"
                  sleep 5
                done

                CHANGES=`echo $DIFF_COMPLETED | php -r 'echo json_decode(file_get_contents("php://stdin"))->result;'`
                echo "Diff result: $CHANGES"
                if [ "$CHANGES" -eq "0" ]
                then
                	# visual regression passed
                	echo -e "\n\nVisual regression test passed! No changes found."
                	PR_MESSAGE="Diffy visual regression test passed! No changes found."
                else
                  # visual regression failed
                	echo -e "\nVisual regression test failed!"
                	REPORT_LINK="https://app.diffy.website/#/diffs/$DIFF_ID"
                	PR_MESSAGE="Diffy visual regression test failed! $REPORT_LINK"
                fi

                # Post the image back to the pull request on GitHub
                if [[ -n ${CI_REPOSITORY_URL} && ${CI_REPOSITORY_URL} == *"github"* ]]
                then
                    echo -e "\nPosting visual regression results back to PR #$PR_NUMBER "
                    curl -s -i -u "$CI_PROJECT_USERNAME:$GITHUB_TOKEN" -d "{\"body\": \"$PR_MESSAGE\"}" $GITHUB_API_URL/issues/$PR_NUMBER/comments > /dev/null
                fi

                if [ "$CHANGES" != "0" ]
                then
                    exit 1
                fi

    executors:
      diffy_executor:
        docker:
          -image: circleci/php:7.3.9
